#!/usr/bin/env bash

set -e
set -o pipefail

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version  }
TMPDIR=${TMPDIR:-/tmp}
[ -n "$ASDF_INSTALL_VERSION" ] || (>&2 echo 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (>&2 echo 'Missing ASDF_INSTALL_PATH' && exit 1)

install_tkn() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local download_url="$(get_download_url $version)"
  local tmp_download_dir="$(get_tmp_dir)"
  local download_path="${tmp_download_dir}/tkn_${version}.tar.gz"
  local bin_install_path="${install_path}/bin"

  echo "Downloading Tekton CLI (tkn) from ${download_url} to ${tmp_download_dir}"
  curl -s -L "$download_url" -o "${download_path}"

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Copying binary"
  tar -zxf ${download_path} --directory ${tmp_download_dir}
  cp ${tmp_download_dir}/tkn ${bin_install_path}

  chmod +x $bin_install_path
}

get_tmp_dir() {
  if [ "${TMPDIR}" = "" ]; then
    echo "$(mktemp -d -t tkn_XXXXXX)"
  fi
  echo "${TMPDIR}"
}

check_version() {
  # https://stackoverflow.com/a/37939589/445232
  # https://stackoverflow.com/a/11123849/445232
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }' | sed 's/^0*//';
}

get_platform() {
  uname
}

get_arch() {
  platform=$1
  version=$2

  # Starting with v0.24.0 the release artifacts for MacOS/Darwin are named "all" instead of a specific arch
  if [ "$platform" == "Darwin" ] && [ "$(check_version "$version")" -ge "$(check_version "0.24.0")" ]
  then
    arch="all"
  else
    arch=$(uname -m)
    case $arch in
      aarch64) arch="arm64";;
      x86_64) arch="x86_64";;
    esac
  fi
  echo "$arch"
}

get_download_url() {
  local version="$1"
  local platform
  platform=$(get_platform)
  local arch
  arch=$(get_arch "$platform" "$version")
  echo "https://github.com/tektoncd/cli/releases/download/v${version}/tkn_${version}_${platform}_${arch}.tar.gz"
}

install_tkn "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
